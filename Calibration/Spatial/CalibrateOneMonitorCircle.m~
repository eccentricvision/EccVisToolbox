%CalibrateOneMonitorCircle
%for fixing a mask to the screen
%
%John Greenwood Dec 2014

clear all;
%% general  & input parameters

thisFile='CalibrateOneMonitorCircle.m';
ThisDirectory=which(thisFile); ThisDirectory=ThisDirectory(1:end-length(thisFile));

BitsYN          = 0;%DefInput('Using the Bits#? (0=no, 1=yes)',0); %no to Bits++ Box
sp.WhereRU      = 2; %lab PC with three Asus monitors

%% setting up the screen and psychtoolbox

AssertOpenGL;
screens=Screen('Screens'); %the handle for each monitor present
%PsychImaging('PrepareConfiguration');

RightScreen = DefInput('Which Screen? 0=Left, 1=Right',0);

switch sp.WhereRU
    case 1 %on the lab PC
        if RightScreen
            gamCal='C:\Documents\MATLAB\Calibration\CalDataAsusVG278right3Dmode.mat';
        else %LeftScreen
            gamCal='C:\Documents\MATLAB\Calibration\CalDataAsusVG278left3Dmode.mat';
        end
    case 2 %on the lab iMac (NEC DiamondPlus monitor)
        gamCal='/Users/Lab/Documents/MATLAB/Calibration/MonitorData/CalDataDiamondPlus.mat'; %select Gamma calibration files
    case 3 %in the office
        gamCal='/Users/John/Documents/MATLAB/Calibration/CalData.mat'; %select Gamma calibration files
    case 4 %laptop
        gamCal='/Users/John/MatlabFiles/Calibration/CalData.mat'; %select Gamma calibration files
        %sp.responseKeys = {'1!' '3#'}; %CCW/CW
end
load(gamCal); %load gamma correction functions %im=floor(LR.LtoVfun(LR,stim)); %sample call to extract correct values

mgrey  = round(LR.LtoVfun(LR,LR.LMax/2)); %mean grey value
minlum = round(LR.LtoVfun(LR,LR.LMin)); %min lum value (keep these values as multipliers rather than RGB values for bitsbox as in mgrey)
maxlum = round(LR.LtoVfun(LR,LR.LMax)); %max lum value
fixlum = round(LR.LtoVfun(LR,(0.75*LR.LMax))); %brightness of trial indicator arc

Screen('Preference','SkipSyncTests',0); %Screen('Preference', 'VBLTimestampingMode', 0);

%now open the monitor window
if sp.WhereRU==1
    [w screenRect]=Screen('OpenWindow',screens, 0,[],32,2); %max(Screens)
else
    [w screenRect] = Screen('OpenWindow',max(screens),0,[],32);
end
%get monitor parameters
centX=screenRect(3)/2;
centY=screenRect(4)/2; %find the x/y centre of the screen

Screen('BlendFunction', w, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
Screen('TextFont', w, 'Arial');
Screen('TextSize', w, 36);

Screen('FillRect', w, mgrey);
Screen('Flip', w);

%% screen/viewing parameters

sp.ScreenResX    = screenRect(3); %screen size in pixels
sp.ScreenResY    = screenRect(4);
if sp.WhereRU==1
sp.ScreenSizeX   = 59.8; %screen size in centimetres (measured for Asus VG278)
sp.ScreenSizeY   = 33.6;
sp.ViewDist      = 60;%65;%57; %60 %70 %50; %viewing distance in cm
sp.BezelSize     = 2.2; %size of monitor bezel/edge in cm (2.2cm each with LED fixation due to gap, 2cm without)
sp.BezelPixels   = round(sp.BezelSize./sp.PixelScale); %how many pixels are hidden behind the bezel
else %lab
    sp.ScreenSizeX = 40;
    sp.ScreenSizeY = 30;
    sp.ViewDist    = 70;
end
sp.PixelScale    = mean([sp.ScreenSizeX./sp.ScreenResX sp.ScreenSizeY./sp.ScreenResY]);%0.035; %size of pixels in cm (take average of X/Y dimensions to assume square pixels- check!)

%where to find the 'zero pos' = midpoint of both screens
sp.ZeroPosX    = centX; %right screen
sp.ZeroPosY    = centY;%980;%720;% 720];%[sp.ScreenResY-150 sp.ScreenResY-150];

%max eccentricity visible
sp.TotalVF      = PixToVA(sp.ViewDist,sp.PixelScale,(sp.ScreenResX)); %size of whole visual field
sp.MaxEcc       = sp.TotalVF/2;
sp.MaxPixDist   = sqrt((sp.ScreenResX^2)+(sp.ScreenResY^2)); %max possible line length (diagonal)

%% parameters and setup

AngVals         = 0:1:360;%0:5:75;%-75:5:75; % [0 25 155 180];%[-45:5:75 105:5:225]; %[-60:15:60 120:15:240];
CircDiamCM      = 30; %diameter of circle to be drawn
CircDiamPix     = CircDiamCM./sp.PixelScale; %circle in pixels

for ang=1:numel(AngVals)
    sp.LineX(ang) = round(sp.ZeroPosX + cos(deg2rad(AngVals(ang))).*(round(CircDiamPix./2))); %circle positions
    sp.LineY(ang) = round(sp.ZeroPosY - sin(deg2rad(AngVals(ang))).*(round(CircDiamPix./2))); %circle positions
end

%% draw shit

ListenChar(2);
touch = 0;
KeyInd = GetKeyboardIndices;
keyBd  = max(KeyInd);%min(KeyInd);%min(KeyInd);% %for keypad or keyboard

%Screen('DrawLine', windowPtr [,color], fromH, fromV, toH, toV [,penWidth]);

%draw lines across the screen
for ang=1:numel(AngVals)-1
    Screen('DrawLine',w,[0 0 0],sp.LineX(ang),sp.LineY(ang),sp.LineX(ang+1),sp.LineY(ang+1),4);
end

Screen('Flip', w);%, vbl + (waitframes - 0.5) * ifi);

KbWait(2);

Screen('CloseAll');
clear mex;

pause(0.5);
ListenChar(0);

